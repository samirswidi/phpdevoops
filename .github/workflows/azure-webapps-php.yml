name: Build, Test, and Deploy PHP App to Azure Web App with Docker

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'webapp45693926'  # Nom de l'application Azure
  DOCKER_IMAGE: 'samirswidi/phpdevoops'  # Nom de l'image Docker
  PHP_VERSION: '8.x'                   # Version PHP utilisée

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'  # Use the Temurin JDK distribution for Java 17

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, pdo, mysqli
          coverage: none

      - name: Install dependencies
        run: composer install --no-progress

      - name: Run tests
        run: vendor/bin/phpunit --testdox tests/GetCurrentYearTest.php

            - name: Install SonarScanner version 6.2.1
        run: |
          # Télécharger SonarScanner version 6.2.1 avec vérification d'erreurs
          curl -f -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
          
          # Vérifier si le téléchargement a réussi
          if [ $? -ne 0 ]; then
            echo "Erreur lors du téléchargement du fichier zip de SonarScanner."
            exit 1
          fi
          
          # Décompresser le fichier téléchargé
          unzip sonar-scanner.zip
          
          # Vérifier si la décompression a réussi
          if [ $? -ne 0 ]; then
            echo "Erreur lors de la décompression du fichier zip de SonarScanner."
            exit 1
          fi
          
          # Déplacer le dossier extrait vers /opt/sonar-scanner
          sudo mv sonar-scanner-6.2.1.4610-linux-x64 /opt/sonar-scanner
          
          # Créer un lien symbolique vers le binaire sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      - name: Set JAVA_HOME to Java 17
        run: export "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH"

      - name: Check Java version
        run: java -version  # Ensure Java 17 is available

      - name: Run SonarQube Scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          sonar-scanner -X \
            -Dsonar.projectKey=php_project \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  docker-build-push:
    runs-on: ubuntu-latest
    needs: test  # Ce job dépend de la phase de test

    steps:
      # Step 1: Set up QEMU for multi-platform support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .                    # Context pour le build Docker
          file: ./Dockerfile            # Chemin du Dockerfile
          push: true                    # Pousser l'image sur DockerHub
          tags: ${{ env.DOCKER_IMAGE }}:1.0.${{ github.run_number }}

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: docker-build-push  # Ce job dépend de la phase de construction Docker
    environment:
      name: 'Development'

    steps:
      # Step 1: Deploy Docker image to Azure Web App
      - name: Deploy Docker image to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ env.DOCKER_IMAGE }}:1.0.${{ github.run_number }}
